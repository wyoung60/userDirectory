{"version":3,"sources":["utils/API.js","utils/UsersContext.js","components/Jumbotron.js","components/InputBar.js","components/UserRow.js","components/UserRowSetup.js","components/Table.js","components/UserGenerator.js","App.js","index.js"],"names":["axios","get","UsersContext","React","createContext","users","unchangedUserState","Jumbotron","className","InputBar","props","id","type","aria-label","aria-describedby","onChange","UserRow","name","phone","email","src","image","UserRowSetup","useContext","map","item","Table","scope","onClick","UserGenerator","useState","usersState","setUsersState","useEffect","API","then","res","data","results","userID","usersArray","first","last","picture","thumbnail","Provider","value","event","typedValue","target","matchedArray","filter","typed","toUpperCase","slice","length","matchFunction","sortedState","sort","a","b","firstName","secondName","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAIe,EACH,WACR,OAAOA,IAAMC,IAAI,0CCENC,EALMC,IAAMC,cAAc,CACvCC,MAAO,GACPC,mBAAoB,K,OCSPC,EAZG,WAChB,OACE,sBAAKC,UAAU,YAAf,UACE,oBAAIA,UAAU,YAAd,gCACA,mBAAGA,UAAU,OAAb,iGCeSC,EAnBE,SAACC,GAChB,OACE,sBAAKF,UAAU,kCAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,sBAAMA,UAAU,mBAAmBG,GAAG,uBAAtC,yBAIF,uBACEC,KAAK,OACLJ,UAAU,eACVK,aAAW,QACXC,mBAAiB,uBACjBC,SAAUL,EAAMK,eCCTC,EAbC,SAACN,GACf,OACE,+BACE,6BAAKA,EAAMO,OACX,6BAAKP,EAAMQ,QACX,6BAAKR,EAAMS,QACX,6BACE,qBAAKC,IAAKV,EAAMW,cCSTC,EAdM,WAGnB,OAFkBC,qBAAWrB,GAArBG,MAEKmB,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAEER,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,MACZC,MAAOM,EAAKN,MACZE,MAAOI,EAAKJ,OAJPI,EAAKd,QCaDe,EApBD,SAAChB,GACb,OACE,wBAAOF,UAAU,QAAjB,UACE,gCACE,+BACE,oBAAImB,MAAM,MAAMC,QAASlB,EAAMkB,QAA/B,kBAGA,oBAAID,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,wBAGJ,gCACE,cAAC,EAAD,UCqFOE,EA7FO,WAAM,MAEUC,mBAAS,CAC3CzB,MAAO,GACPC,mBAAoB,KAJI,mBAEnByB,EAFmB,KAEPC,EAFO,KAQ1BC,qBAAU,WAERC,IAAeC,MAAK,SAACC,GAEnB,IAAMC,EAAOD,EAAIC,KAAKC,QAElBC,EAAS,EAEPC,EAAaH,EAAKb,KAAI,SAACC,GAE3B,MAAO,CACLd,KAFF4B,EAGEtB,KAAK,GAAD,OAAKQ,EAAKR,KAAKwB,MAAf,YAAwBhB,EAAKR,KAAKyB,MACtCxB,MAAOO,EAAKP,MACZC,MAAOM,EAAKN,MACZE,MAAOI,EAAKkB,QAAQC,cAKxBZ,EAAc,2BACTD,GADQ,IAEX1B,MAAOmC,EAEPlC,mBAAoBkC,UAGvB,IA+CH,OACE,cAAC,EAAaK,SAAd,CAAuBC,MAAOf,EAA9B,SACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUhB,SAzBC,SAACgC,GAChB,IAAMC,EAAaD,EAAME,OAAOH,MAW1BI,EAAenB,EAAWzB,mBAAmB6C,QAAO,SAAC1B,GAAD,OATpC,SAACA,EAAM2B,GAG3B,GAFmBA,EAAMC,gBACJ5B,EAAK6B,MAAM,EAAGF,EAAMG,QAAQF,cAE/C,OAAO5B,EAMT+B,CAAc/B,EAAKR,KAAM+B,MAI3BhB,EAAc,2BAAKD,GAAN,IAAkB1B,MAAO6C,QASlC,cAAC,EAAD,CAAOtB,QAjDK,WAEhB,IAAM6B,EAAc1B,EAAW1B,MAAMqD,MAAK,SAAUC,EAAGC,GACrD,IAAIC,EAAYF,EAAE1C,KAAKoC,cACnBS,EAAaF,EAAE3C,KAAKoC,cACxB,OAAIQ,EAAYC,GACN,EACCD,EAAYC,EACd,EAEA,KAKX9B,EAAc,2BACTD,GADQ,IAEX1B,MAAOoD,EACPnD,mBAAoBmD,cC1DXM,MAJf,WACE,OAAO,cAAC,EAAD,K,MCCTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9d7a1677.chunk.js","sourcesContent":["//Import axios\r\nimport axios from \"axios\";\r\n\r\n//Export a method named userData that calls to randomuser api.\r\nexport default {\r\n  userData: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=50\");\r\n  },\r\n};\r\n","import React from \"react\";\r\n\r\n//Context generator to be used with useContext methods\r\nconst UsersContext = React.createContext({\r\n  users: [],\r\n  unchangedUserState: [],\r\n});\r\n\r\nexport default UsersContext;\r\n","import React from \"react\";\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <h1 className=\"display-4\">Employee Directory</h1>\r\n      <p className=\"lead\">\r\n        Click on name sort employees alphabetically or type a name into the\r\n        search bar.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\n\r\nconst InputBar = (props) => {\r\n  return (\r\n    <div className=\"input-group input-group-sm mb-3\">\r\n      <div className=\"input-group-prepend\">\r\n        <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\r\n          Find Name\r\n        </span>\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        aria-label=\"Small\"\r\n        aria-describedby=\"inputGroup-sizing-sm\"\r\n        onChange={props.onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputBar;\r\n","import React from \"react\";\r\n\r\n//Stateless component to generate table rows\r\nconst UserRow = (props) => {\r\n  return (\r\n    <tr>\r\n      <td>{props.name}</td>\r\n      <td>{props.phone}</td>\r\n      <td>{props.email}</td>\r\n      <td>\r\n        <img src={props.image}></img>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default UserRow;\r\n","import React, { useContext } from \"react\";\r\nimport UsersContext from \"../utils/UsersContext\";\r\nimport UserRow from \"./UserRow\";\r\n\r\n//Uses context to map over data and generate a row with the stateless component\r\nconst UserRowSetup = () => {\r\n  const { users } = useContext(UsersContext);\r\n\r\n  return users.map((item) => (\r\n    <UserRow\r\n      key={item.id}\r\n      name={item.name}\r\n      phone={item.phone}\r\n      email={item.email}\r\n      image={item.image}\r\n    />\r\n  ));\r\n};\r\n\r\nexport default UserRowSetup;\r\n","import React from \"react\";\r\nimport UserRowSetup from \"./UserRowSetup\";\r\n\r\nconst Table = (props) => {\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\" onClick={props.onClick}>\r\n            Name\r\n          </th>\r\n          <th scope=\"col\">Phone</th>\r\n          <th scope=\"col\">Email</th>\r\n          <th scope=\"col\">Image</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <UserRowSetup />\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","//Import necessary dependencies\r\nimport React, { useEffect, useState } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport UsersContext from \"../utils/UsersContext\";\r\nimport Jumbotron from \"./Jumbotron\";\r\nimport InputBar from \"./InputBar\";\r\nimport Table from \"./Table\";\r\n\r\n//Function for export\r\nconst UserGenerator = () => {\r\n  //Create user state and add set state function.\r\n  const [usersState, setUsersState] = useState({\r\n    users: [],\r\n    unchangedUserState: [],\r\n  });\r\n\r\n  //Use effect to pull initial data set\r\n  useEffect(() => {\r\n    //Calls API.js to get data once data is recieved sorts and sets User state.\r\n    API.userData().then((res) => {\r\n      //Store returned data in variable\r\n      const data = res.data.results;\r\n      //Add a userID for key\r\n      let userID = 0;\r\n      //Map the array pulling in necessary data and returning an object\r\n      const usersArray = data.map((item) => {\r\n        userID++;\r\n        return {\r\n          id: userID,\r\n          name: `${item.name.first} ${item.name.last}`,\r\n          phone: item.phone,\r\n          email: item.email,\r\n          image: item.picture.thumbnail,\r\n        };\r\n      });\r\n\r\n      //Use a spread operator to pull all data from usersState and add data to both keys of object\r\n      setUsersState({\r\n        ...usersState,\r\n        users: usersArray,\r\n        //This key is used to reference back to after being changed.\r\n        unchangedUserState: usersArray,\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  //Function for sorting when clicking on name\r\n  const sortClick = () => {\r\n    //Store sorted array into new variable based on name\r\n    const sortedState = usersState.users.sort(function (a, b) {\r\n      var firstName = a.name.toUpperCase();\r\n      var secondName = b.name.toUpperCase();\r\n      if (firstName < secondName) {\r\n        return -1;\r\n      } else if (firstName > secondName) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    //Sets usersState to new sorted Array\r\n    setUsersState({\r\n      ...usersState,\r\n      users: sortedState,\r\n      unchangedUserState: sortedState,\r\n    });\r\n  };\r\n\r\n  //Function for changes made in input bar\r\n  const onChange = (event) => {\r\n    const typedValue = event.target.value;\r\n    //Function to match what has been typed with array of names\r\n    const matchFunction = (item, typed) => {\r\n      const typedUpper = typed.toUpperCase();\r\n      const currentMatch = item.slice(0, typed.length).toUpperCase();\r\n      if (typedUpper === currentMatch) {\r\n        return item;\r\n      }\r\n    };\r\n\r\n    //Variable to stored matched names from the unchangeUserState\r\n    const matchedArray = usersState.unchangedUserState.filter((item) =>\r\n      matchFunction(item.name, typedValue)\r\n    );\r\n\r\n    //Sets users to new array.\r\n    setUsersState({ ...usersState, users: matchedArray });\r\n  };\r\n\r\n  //Returns JSX values\r\n  return (\r\n    <UsersContext.Provider value={usersState}>\r\n      <div>\r\n        <Jumbotron />\r\n        <InputBar onChange={onChange} />\r\n        <Table onClick={sortClick} />\r\n      </div>\r\n    </UsersContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserGenerator;\r\n","//Imports user generator\nimport UserGenerator from \"./components/UserGenerator\";\n\nfunction App() {\n  return <UserGenerator />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}